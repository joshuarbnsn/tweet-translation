<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
    <spring:beans>
        <spring:import resource="classpath:posttranslation.xml"/>
    </spring:beans>
    <munit:test name="new-test-suite-post:/messages:application/json:apiConfigTest" description="Test" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Log Initial Payload']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('FrenchMessage.json').asStream()]"/>
        </mock:when>
        <mock:when messageProcessor="mule:flow" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="detectLanguage"/>
            </mock:with-attributes>
            <mock:then-return payload="#['fr']"/>
  
        </mock:when>
        <mock:when messageProcessor="mule:flow" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="translateMessage"/>
            </mock:with-attributes>
            <mock:then-return payload="#['Let&amp;#39;s meet at 5pm for happy hour!']"/>
        </mock:when>
        <mock:when messageProcessor="mule:flow" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="postMessage"/>
            </mock:with-attributes>
            <mock:then-return payload="#['Message':'success']"/>
        </mock:when>
        <flow-ref name="post:/messages:application/json:apiConfig" doc:name="Flow-ref to post:/messages:application/json:apiConfig"/>
    </munit:test>
    <munit:test name="new-test-suite-detectLanguageTest" description="Test" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Google Detect']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('DetectSpanishResponse.json').asStream()]"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform To Detect Input']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals message="Incorrect input message" expectedValue="#['Bonjour tout le monde']" actualValue="#[payload.text]" doc:name="Assert Equals"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-not-null doc:name="Assert Not Null Payload"/>
            </mock:assertions-after-call>
        </mock:spy>
        <munit:set payload="#[getResource('FrenchMessage.json').asStream()]" doc:name="Set Message"/>
        <json:json-to-object-transformer returnClass="com.mulesoft.demo.translation.dto.input.Message" doc:name="JSON to Object"/>
        <flow-ref name="detectLanguage" doc:name="Flow-ref to detectLanguage"/>
        <munit:assert-true message="Failed to detect language" condition="#[payload == 'es']" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="new-test-suite-translateMessageTest" description="Test" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Google Translate']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('FrenchTranslationResponse.json').asStream()]"/>
        </mock:when>
        <munit:set payload="#[getResource('FrenchMessage.json').asStream()]" doc:name="Set Message"/>
        <json:json-to-object-transformer returnClass="com.mulesoft.demo.translation.dto.input.Message" doc:name="JSON to Object"/>
        <set-variable variableName="language" value="#['fr']" doc:name="Variable"/>
        <flow-ref name="translateMessage" doc:name="Flow-ref to translateMessage"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform To Translation Request']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="new-test-suite-translateMessageTest2" description="Test" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Google Translate']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('FrenchTranslationResponse.json').asStream()]"/>
        </mock:when>
        <munit:set payload="#[getResource('FrenchMessage.json').asStream()]" doc:name="Set Message"/>
        <json:json-to-object-transformer returnClass="com.mulesoft.demo.translation.dto.input.Message" doc:name="JSON to Object"/>
        <set-variable variableName="language" value="#['en']" doc:name="Variable"/>
        <flow-ref name="translateMessage" doc:name="Flow-ref to translateMessage"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['No Subtitles Needed']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
</mule>
